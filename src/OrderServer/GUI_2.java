/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package OrderServer;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author elricMercer
 */
public class GUI_2 extends javax.swing.JFrame {

    /**
     * Creates new form GUI_2
     */
    
    double total;
    int id;
    ArrayList<String> items;

    public GUI_2(double total, int id, ArrayList<String> items)
    {
        this.total = total;
        this.id = id;
        this.items = items;
    }
    
    public GUI_2() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel1.setText("PAYMENT");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel2.setText("TOTAL: RM");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel3.setText("PAY:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel4.setText("RM");

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jButton1.setText("PROCEED");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jButton2.setText("CLOSE");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(92, 92, 92)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addComponent(jButton1)))))
                .addContainerGap(236, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(232, 232, 232)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 219, Short.MAX_VALUE)
                .addComponent(jButton2))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addContainerGap(104, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        GUI_3 g3 = new GUI_3();
        GUI_4 g4 = new GUI_4();
        double diff=0.0;
        boolean priceCheck = true;
        String sInputSum = jTextField2.getText();
        double inputSum = 0.0;
        try
        {
            inputSum = Double.parseDouble(sInputSum);
        }
        catch(Exception e)
        {
            priceCheck = false;
        }
        if(priceCheck)
        {
            if(total==inputSum)
            {
                setVisible(false);
                dispose();
                g4.setVisible(true);
                try
                {
                    Connection conn = DriverManager.getConnection("jdbc:derby://localhost:1527/restaurent","root","root");
                    Statement stRead = conn.createStatement();
                    ResultSet rRead = stRead.executeQuery("SELECT * FROM USER_DETAILS");
                    String userName="";
                    while(rRead.next())
                    {
                        if(rRead.getBoolean("LOGGED_IN")==true)
                            userName = rRead.getString("USERNAME");
                    }
                    String SQL1="INSERT INTO ORDER_DETAILS VALUES (?,?)";
                    PreparedStatement p1Write = conn.prepareStatement(SQL1);
                    p1Write.setInt(1, id);
                    p1Write.setString(2, userName);
                    p1Write.executeUpdate();
                    p1Write.close();
                    String date;
                    DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
                    LocalDateTime ld = LocalDateTime.now(); 
                    date = dtf.format(ld);
                    String SQL2="INSERT INTO ITEM_DETAILS VALUES(?,?,?,?,?,?)";
                    for(int i=0;i<items.size();i+=4)
                    {
                        PreparedStatement p2Write = conn.prepareStatement(SQL2);
                        p2Write.setInt(1, Integer.parseInt(items.get(i)));
                        p2Write.setInt(2, id);
                        p2Write.setInt(3, Integer.parseInt(items.get(i+2)));
                        p2Write.setString(4, items.get(i+1));
                        p2Write.setString(5, date);
                        p2Write.setString(6, items.get(i+3));
                        p2Write.executeUpdate();
                        p2Write.close();
                    }
                    Statement st2Read = conn.createStatement();
                    ResultSet r2Read = st2Read.executeQuery("SELECT * FROM INVENTORY");
                    String SQL3 = "UPDATE INVENTORY SET QTY = ? WHERE ITEM_ID = ?";
                    for(int i=0;i<items.size();i+=4)
                    {
                        System.out.println("inside forloop check");
                        while(r2Read.next())
                        {
                            System.out.println("inside whileloop check");
                            if(r2Read.getInt("ITEM_ID")==Integer.parseInt(items.get(i)))
                            {
                                System.out.println("inside ifelse check");
                                int qty = r2Read.getInt("QTY");
                                int newQty = qty-Integer.parseInt(items.get(i+2));
                                PreparedStatement p3Write = conn.prepareStatement(SQL3);
                                p3Write.setInt(1, newQty);
                                p3Write.setInt(2, Integer.parseInt(items.get(i)));
                                p3Write.executeUpdate();
                                p3Write.close();
                            }
                        }
                    }
                    conn.close();
                }
                catch(Exception e)
                {

                }
            }
            else if(total<inputSum)
            {
                diff = inputSum-total;
                String a = String.valueOf(diff);
                g3.jLabel4.setText(a);
                setVisible(false);
                dispose();
                g3.setVisible(true);
                try
                {
                    Connection conn = DriverManager.getConnection("jdbc:derby://localhost:1527/restaurent","root","root");
                    Statement stRead = conn.createStatement();
                    ResultSet rRead = stRead.executeQuery("SELECT * FROM USER_DETAILS");
                    String userName="";
                    while(rRead.next())
                    {
                        if(rRead.getBoolean("LOGGED_IN")==true)
                            userName = rRead.getString("USERNAME");
                    }
                    String SQL1="INSERT INTO ORDER_DETAILS VALUES (?,?)";
                    PreparedStatement p1Write = conn.prepareStatement(SQL1);
                    p1Write.setInt(1, id);
                    p1Write.setString(2, userName);
                    p1Write.executeUpdate();
                    p1Write.close();
                    String date;
                    DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
                    LocalDateTime ld = LocalDateTime.now(); 
                    date = dtf.format(ld);
                    String SQL2="INSERT INTO ITEM_DETAILS VALUES(?,?,?,?,?,?)";
                    for(int i=0;i<items.size();i+=4)
                    {
                        PreparedStatement p2Write = conn.prepareStatement(SQL2);
                        p2Write.setInt(1, Integer.parseInt(items.get(i)));
                        p2Write.setInt(2, id);
                        p2Write.setInt(3, Integer.parseInt(items.get(i+2)));
                        p2Write.setString(4, items.get(i+1));
                        p2Write.setString(5, date);
                        p2Write.setString(6, items.get(i+3));
                        p2Write.executeUpdate();
                        p2Write.close();
                    }
                    Statement st2Read = conn.createStatement();
                    ResultSet r2Read = st2Read.executeQuery("SELECT * FROM INVENTORY");
                    String SQL3 = "UPDATE INVENTORY SET QTY = ? WHERE ITEM_ID = ?";
                    for(int i=0;i<items.size();i+=4)
                    {
                        System.out.println("inside forloop check");
                        while(r2Read.next())
                        {
                            System.out.println("inside whileloop check");
                            if(r2Read.getInt("ITEM_ID")==Integer.parseInt(items.get(i)))
                            {
                                System.out.println("inside ifelse check");
                                int qty = r2Read.getInt("QTY");
                                int newQty = qty-Integer.parseInt(items.get(i+2));
                                PreparedStatement p3Write = conn.prepareStatement(SQL3);
                                p3Write.setInt(1, newQty);
                                p3Write.setInt(2, Integer.parseInt(items.get(i)));
                                p3Write.executeUpdate();
                                p3Write.close();
                            }
                        }
                    }
                    conn.close();
                }
                catch(Exception e)
                {

                }
            }
            else if(total>inputSum)
            {
                diff = total-inputSum;
                total = diff;
                String a = String.valueOf(diff);
                jLabel5.setText("REMAINING: RM"+a);
            }
        }
        else
            JOptionPane.showMessageDialog(null, "Enter correct price.....!");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI_2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    public static javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    public static javax.swing.JLabel jLabel7;
    public static javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
