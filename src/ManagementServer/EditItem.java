/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ManagementServer;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;

/**
 *
 * @author elricMercer
 */
public class EditItem extends javax.swing.JFrame {

    /**
     * Creates new form EditItem
     */
    public EditItem() {
        initComponents();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jButton1.setText("CLOSE");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jButton2.setText("EDIT NAME");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jButton3.setText("ADD QTY");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jButton4.setText("REMOVE QTY");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jButton5.setText("CHANGE PRICE");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton1))
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5)
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButton1)
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addGap(0, 77, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try
        {
            Connection conn = DriverManager.getConnection("jdbc:derby://localhost:1527/restaurent","root","root");
            Statement stRead = conn.createStatement();
            ResultSet rRead = stRead.executeQuery("SELECT * from MENU_DETAILS");
            String itemName = JOptionPane.showInputDialog("Enter item Name");
            String SQL = "UPDATE MENU_DETAILS SET FOOD_NAME=? WHERE FOOD_ID=?";
            boolean stat = false;
            while(rRead.next())
            {
                if(itemName.equalsIgnoreCase(rRead.getString("FOOD_NAME")))
                {
                    stat = true;
                    boolean nameValid = false;
                    String newName = JOptionPane.showInputDialog("Enter new Name");
                    nameValid = newName.matches("[a-zA-Z]+");
                    if(nameValid && !newName.equals(""))
                    {
                       int itemID = rRead.getInt("FOOD_ID");
                        PreparedStatement p = conn.prepareStatement(SQL);
                        p.setString(1, newName);
                        p.setInt(2, itemID);
                        p.executeUpdate();
                        p.close();
                        JOptionPane.showMessageDialog(null, "UPDATED....!"); 
                    }
                    else
                        JOptionPane.showMessageDialog(null, "Enter correct name....!"); 
                }
            }
            if(stat==false)
                JOptionPane.showMessageDialog(null, "ITEM NOT FOUND....!");
            conn.close();
        }
        catch(Exception e)
        {
            
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try
        {
            Connection conn = DriverManager.getConnection("jdbc:derby://localhost:1527/restaurent","root","root");
            Statement stRead = conn.createStatement();
            Statement st2Read = conn.createStatement();
            ResultSet rRead = stRead.executeQuery("SELECT * from MENU_DETAILS");
            ResultSet r2Read = st2Read.executeQuery("SELECT * from INVENTORY");
            String itemName = JOptionPane.showInputDialog("Enter item Name");
            String SQL = "UPDATE INVENTORY SET QTY=? WHERE ITEM_ID=?";
            int itemID=0;
            boolean stat = false;
            while(rRead.next())
            {
                if(itemName.equalsIgnoreCase(rRead.getString("FOOD_NAME")))
                {
                    itemID = rRead.getInt("FOOD_ID");
                    stat=true;
                }
            }
            if(stat)
            {
                while(r2Read.next())
                {
                    if(itemID==r2Read.getInt("ITEM_ID"))
                    {
                        String addQty = JOptionPane.showInputDialog("Add QTY");
                        boolean qtyCheck = true;
                        int iQtyCheck = 0;
                        try
                        {
                            iQtyCheck = Integer.parseInt(addQty);
                        }
                        catch(Exception e)
                        {
                            qtyCheck = false;
                        }
                        if(qtyCheck)
                        {
                            int iAddQty = Integer.parseInt(addQty);
                            int qty = r2Read.getInt("QTY");
                            int newQty = iAddQty+qty;
                            PreparedStatement p = conn.prepareStatement(SQL);
                            p.setInt(1, newQty);
                            p.setInt(2, itemID);
                            p.executeUpdate();
                            p.close();
                            JOptionPane.showMessageDialog(null, "ADDED....!");
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(null, "Enter correct qty....!");
                        }
                    }
                }
            }
            else
                JOptionPane.showMessageDialog(null, "ITEM NOT FOUND....!");
            conn.close();
        }
        catch(Exception e)
        {
            
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try
        {
            Connection conn = DriverManager.getConnection("jdbc:derby://localhost:1527/restaurent","root","root");
            Statement stRead = conn.createStatement();
            Statement st2Read = conn.createStatement();
            ResultSet rRead = stRead.executeQuery("SELECT * from MENU_DETAILS");
            ResultSet r2Read = st2Read.executeQuery("SELECT * from INVENTORY");
            String itemName = JOptionPane.showInputDialog("Enter item Name");
            String SQL = "UPDATE INVENTORY SET QTY=? WHERE ITEM_ID=?";
            int itemID=0;
            boolean stat = false;
            while(rRead.next())
            {
                if(itemName.equalsIgnoreCase(rRead.getString("FOOD_NAME")))
                {
                    itemID = rRead.getInt("FOOD_ID");
                    stat=true;
                }
            }
            if(stat)
            {
                while(r2Read.next())
                {
                    if(itemID==r2Read.getInt("ITEM_ID"))
                    {
                        int newQty = 0;
                        String addQty = JOptionPane.showInputDialog("REMOVE QTY");
                        boolean qtyCheck = true;
                        int iQtyCheck = 0;
                        try
                        {
                            iQtyCheck = Integer.parseInt(addQty);
                        }
                        catch(Exception e)
                        {
                            qtyCheck = false;
                        }
                        if(qtyCheck)
                        {
                           int iRQty = Integer.parseInt(addQty);
                            int qty = r2Read.getInt("QTY");
                            if(qty>=iRQty)
                                newQty = qty-iRQty;
                            else
                                newQty = 0;
                            PreparedStatement p = conn.prepareStatement(SQL);
                            p.setInt(1, newQty);
                            p.setInt(2, itemID);
                            p.executeUpdate();
                            p.close();
                            JOptionPane.showMessageDialog(null, "DELETED....!"); 
                        }
                        else
                            JOptionPane.showMessageDialog(null, "Enter correct qty....!"); 
                    }
                }
            }
            else
                JOptionPane.showMessageDialog(null, "ITEM NOT FOUND....!");
            conn.close();
        }
        catch(Exception e)
        {
            
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try
        {
            Connection conn = DriverManager.getConnection("jdbc:derby://localhost:1527/restaurent","root","root");
            Statement stRead = conn.createStatement();
            ResultSet rRead = stRead.executeQuery("SELECT * from MENU_DETAILS");
            String itemName = JOptionPane.showInputDialog("Enter item Name");
            boolean stat = false;
            String newPrice = "";
            int itemID = 0;
            while(rRead.next())
            {
                if(itemName.equalsIgnoreCase(rRead.getString("FOOD_NAME")))
                {
                    stat = true;System.out.println("inside rRead boolean");
                    itemID = rRead.getInt("FOOD_ID");System.out.println("inside rRead itemid "+itemID);
                    break;
                }
            }
            if(stat)
            {
                String SQL = "UPDATE MENU_DETAILS SET FOOD_PRICE=? WHERE FOOD_ID=?";
                newPrice = JOptionPane.showInputDialog("Enter new Price");
                boolean priceCheck = true;
                double dPriceCheck = 0.0;
                try
                {
                    dPriceCheck = Double.parseDouble(newPrice);
                }
                catch(Exception e)
                {
                    priceCheck = false;
                }
                if(priceCheck)
                {
                    PreparedStatement p = conn.prepareStatement(SQL);
                    p.setString(1, newPrice);
                    p.setInt(2, itemID);
                    p.executeUpdate();
                    p.close();
                    JOptionPane.showMessageDialog(null, "UPDATED....!");
                }
                else
                    JOptionPane.showMessageDialog(null, "Enter correct price....!");
            }
            else
                JOptionPane.showMessageDialog(null, "ITEM NOT FOUND....!");
            conn.close();
        }
        catch(Exception e)
        {
            
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditItem().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    // End of variables declaration//GEN-END:variables
}
